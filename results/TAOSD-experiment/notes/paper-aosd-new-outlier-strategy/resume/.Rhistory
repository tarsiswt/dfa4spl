} else {
#For Round 3, we adjust the model to make the model additive according to Tukey test.
anova.ql = aov(time^0.5~replic+student:replic+spl+technique)
}
plot(anova.ql)
print(summary(anova.ql))
}
tim
time
##############################################################
#root path.
rootPath = "/Users/marcinho/Dropbox/Tese/Experimento/"
#experiment round. Valid numbers: 2 and 3.
round = 2
#task number. Valid numbers: 1 and 2.
task = 1
#dotplot.
dotplot = FALSE
#if false, we generate a Boxplot instead of Beanplot
beanplot = TRUE
#histograms (orginal data + sqrt transformation)
histograms = FALSE
#densityplot (orginal data + sqrt transformation)
densityplot = FALSE
#if true, we plot the ANOVA summary.
anova = TRUE
##############################################################
fileName1 = "Time-M1-All"
fileName2 = "Time-M2-All"
if (dotplot) {
fileName1 = paste(fileName1, "-dot", sep="")
fileName2 = paste(fileName2, "-dot", sep="")
}
if (task == 1) {
fileName = fileName1
} else {
fileName = fileName2
}
fileName = paste(fileName, ".dat", sep="")
if (round == 2) {
data = read.table(file=paste(rootPath, "Round 2/Dados/", fileName, sep=""), header=T)
} else {
data = read.table(file=paste(rootPath, "Round 3/Dados/", fileName, sep=""), header=T)
}
attach(data)
#readline(prompt = "Pause. Press <Enter> to continue...")
replic = factor(Replic.)
student = factor(Student.)
spl = factor(SPL.)
technique = factor(Technique.)
if (dotplot && !anova) {
library(ggplot2)
p = qplot(student, Time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
}
if (beanplot) {
library(beanplot)
beanplot(time~technique, col=c("black","white","blue", "red"), ylab="Time (Seconds)", xlab="Technique")
} else {
plot(time~technique, col=c("gray"), xlab="Technique", ylab="Time (Seconds)")
}
if (histograms) {
hist(time)
hist(sqrt(time))
hist(log(time))
}
if (densityplot) {
library(lattice)
densityplot(time)
densityplot(sqrt(time))
}
if (anova) {
if (round == 2) {
anova.ql = aov(time~replic+student:replic+spl+technique)
} else {
#For Round 3, we adjust the model to make the model additive according to Tukey test.
anova.ql = aov(time^0.5~replic+student:replic+spl+technique)
}
plot(anova.ql)
print(summary(anova.ql))
}
data
##############################################################
#root path.
rootPath = "/Users/marcinho/Dropbox/Tese/Experimento/"
#experiment round. Valid numbers: 2 and 3.
round = 2
#task number. Valid numbers: 1 and 2.
task = 1
#dotplot.
dotplot = FALSE
#if false, we generate a Boxplot instead of Beanplot
beanplot = TRUE
#histograms (orginal data + sqrt transformation)
histograms = FALSE
#densityplot (orginal data + sqrt transformation)
densityplot = FALSE
#if true, we plot the ANOVA summary.
anova = TRUE
##############################################################
fileName1 = "Time-M1-All"
fileName2 = "Time-M2-All"
if (dotplot) {
fileName1 = paste(fileName1, "-dot", sep="")
fileName2 = paste(fileName2, "-dot", sep="")
}
if (task == 1) {
fileName = fileName1
} else {
fileName = fileName2
}
fileName = paste(fileName, ".dat", sep="")
if (round == 2) {
data = read.table(file=paste(rootPath, "Round 2/Dados/", fileName, sep=""), header=T)
} else {
data = read.table(file=paste(rootPath, "Round 3/Dados/", fileName, sep=""), header=T)
}
attach(data)
#readline(prompt = "Pause. Press <Enter> to continue...")
replic = factor(Replic.)
student = factor(Student.)
spl = factor(SPL.)
technique = factor(Technique.)
if (dotplot && !anova) {
library(ggplot2)
p = qplot(student, Time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
}
if (beanplot) {
library(beanplot)
beanplot(time~technique, col=c("black","white","blue", "red"), ylab="Time (Seconds)", xlab="Technique")
} else {
plot(time~technique, col=c("gray"), xlab="Technique", ylab="Time (Seconds)")
}
if (histograms) {
hist(time)
hist(sqrt(time))
hist(log(time))
}
if (densityplot) {
library(lattice)
densityplot(time)
densityplot(sqrt(time))
}
if (anova) {
if (round == 2) {
anova.ql = aov(time~replic+student:replic+spl+technique)
} else {
#For Round 3, we adjust the model to make the model additive according to Tukey test.
anova.ql = aov(time^0.5~replic+student:replic+spl+technique)
}
plot(anova.ql)
print(summary(anova.ql))
}
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
data
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
if (dotplot && !anova) {
library(ggplot2)
p = qplot(student, Time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
}
if (dotplot && !anova) {
library(ggplot2)
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
}
plot(time~technique, notch=T, col=c("gray"), xlab="Technique", ylab="Time (Seconds)")
hist(time)
hist(sqrt(time))
hist(log(time))
hist(time)
hist(sqrt(time))
time
hist(time)
hist(sqrt(time))
hist(log(time))
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
beanplot(time~technique, col=c("black","white","blue", "red"), ylab="Time (Seconds)", xlab="Technique")
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
beanplot(time~technique, col=c("black","white","blue", "red"), ylab="Time (Seconds)", xlab="Technique")
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
data
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
data
time
length(time)
source('~/Dropbox/Tese/Experimento/R scripts/Tukey.r')
TukeyNADD.QL.REP(anova.ql)
source('~/Dropbox/Tese/Experimento/R scripts/Tukey.r')
tukeyAdditive(anova.ql)
summary(anova.ql)
source('~/Dropbox/Tese/Experimento/R scripts/Boxcox.r')
boxcoxANOVA(anova.ql)
levene
batlett
bartlett
plot(time~technique, col=c("gray"), xlab="Technique", ylab="Time (Seconds)")
time
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
data
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
beanplot = TRUE
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
hist(time)
hist(sqrt(time))
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
time
p = qplot(student, time, colour=spl, shape = factor(technique), xlab="Students", ylab="Time (Seconds)")
p + geom_point(size=3) + labs(colour="SPL", shape="Technique")
time
median(time)
data
d = data[-Technique==EI]
d = data[Technique==EI]
d = data[,4]
d
data
d = data[data[,5] == "EI"]
d
d = data[data[,4] == "EI"]
d
View(d)
d = data[,data[,4] == "EI"]
d
d = data[data[,4] == "EI",]
d
data[1,4] == "EI"
data[1,5] == "EI"
data[1,3] == "EI"
data[0,3] == "EI"
data[1,3] == "EI"
data[1,4] == "EI"
data[1,4] == "VSoC"
data[1,4] == "VSoC,"
data[1,4] == "EI,"
d = data[data[,4] == "EI,",]
d
d = data[,data[,4] == "EI,"]
d = data[data[,4] == "EI,",]
d
d2 = data[data[,4] == "VSoC,",]
d2
getEIVector <- function(data) {
return data[data[,4] == "EI,",]
}
getVSoCVector <- function(data) {
return data[data[,4] == "VSoC,",]
}
getEIVector <- function(data) {
data[data[,4] == "EI,",]
}
getVSoCVector <- function(data) {
data[data[,4] == "VSoC,",]
}
ei = getEIVector(data)
ei
vsoc = getVSoCVector(data)
vsoc
vsoc[time]
vsoc[,5]
getEItimeVector <- function(data) {
eiVector = data[data[,4] == "EI,",]
eiVector[,5]
}
getVSoCtimeVector <- function(data) {
vsocVector = data[data[,4] == "VSoC,",]
vsocVector[,5]
}
getEItime <- function(data) {
eiVector = data[data[,4] == "EI,",]
eiVector[,5]
}
getVSoCtime <- function(data) {
vsocVector = data[data[,4] == "VSoC,",]
vsocVector[,5]
}
eiTime = getEItime(data)
eiTime
vsocTime = getVSoCtime(data)
vsocTime
eim = median(eiTime)
median(vsocTime)
vsocm = median(vsocTime)
eim
vsocm
sort(vsocTime)
1027/282.5
282.5/1027
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
timeei = getEITime(data)
timeei
timevsoc = getVSoCTime(data)
timevsoc
group <- as.factor(c(rep(1, length(timevsoc)), rep(2, length(timeei))))
levene.test(y, group)
bartlett.test(y, group)
y = c(timevsoc, timeei)
levene.test(y, group)
bartlett.test(y, group)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
source('~/Dropbox/Tese/Experimento/R scripts/Errors.r')
source('~/Dropbox/Tese/Experimento/R scripts/Errors.r')
data
data[,5]
poisson.test(data[,5])
install.packages("R2HTML")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
library(R2HTML)
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
data
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
errorsDataFrame = as.matrix("Technique"=technique, "Errors"=time)
importPath = "/Users/marcinho/Dropbox/Tese/Experimento/"
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
errorsDataFrame = as.matrix("Technique"=technique, "Errors"=time)
errorsFileName = "Time-Errors-All"
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
errorsDataFrame = as.matrix("Technique"=technique, "Errors"=time)
?barplot
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
errorsDataFrame = data.frame("Technique"=errorsData[,4], "Errors"=errorsData[,5], "Student"=errorsData[,2])
errorsDataFrame
barplot(as.matrix(errorsDataFrame), ylab="Number of Errors (NE)")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
getEIData <- function(data) {
eiVector = data[data[,4] == "EI,",]
eiVector[,5]
}
getVSoCData <- function(data) {
vsocVector = data[data[,4] == "VSoC,",]
vsocVector[,5]
}
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsMatrix = as.matrix("EI"=eiErrors, "VSoC"=vsocErrors)
#errorsDataFrame = data.frame("Technique"=errorsData[,4], "Errors"=errorsData[,5], "Student"=errorsData[,2])
png(paste(exportPath, "barplot.png", sep=""))
barplot(errorsMatrix, ylab="Number of Errors (NE)")
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
png(paste(exportPath, "barplot.png", sep=""))
barplot(as.matrix(errorsMatrix), ylab="Number of Errors (NE)")
exportPath = "/Users/marcinho/R-scripts-results/"
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
#png(paste(exportPath, "barplot.png", sep=""))
barplot(as.matrix(errorsMatrix), ylab="Number of Errors (NE)")
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
#png(paste(exportPath, "barplot.png", sep=""))
barplot(as.matrix(errorsDataFrame), ylab="Number of Errors (NE)")
barplot(as.matrix(errorsDataFrame), ylab="Number of Errors (NE)")
barplot(as.matrix(errorsDataFrame), ylab="Number of Errors (NE)")
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
#png(paste(exportPath, "barplot.png", sep=""))
barplot(as.matrix(errorsDataFrame), col=c("blue", "red"), ylab="Number of Errors (NE)")
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
#png(paste(exportPath, "barplot.png", sep=""))
barplot(as.matrix(errorsDataFrame), col=c("blue", "red"), ylab="Number of Errors (NE)")
plot(errorsDataFrame)
errorsDataFrame
errorsDataFrame[,1]
plot(errorsDataFrame[,1])
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
#png(paste(exportPath, "barplot.png", sep=""))
barplot(as.matrix(errorsDataFrame), col=c("blue", "red"), ylab="Number of Errors (NE)")
getEIData <- function(data) {
eiVector = data[data[,4] == "EI,",]
eiVector[,5]
}
getVSoCData <- function(data) {
vsocVector = data[data[,4] == "VSoC,",]
vsocVector[,5]
}
importPath = "/Users/marcinho/Dropbox/Tese/Experimento/"
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
errorsFileName = "Time-Errors-All"
errorsData = read.table(file=paste(importPath, "Round 2/Dados/", errorsFileName, ".dat", sep=""), header=T)
eiErrors = getEIData(errorsData)
vsocErrors = getVSoCData(errorsData)
errorsDataFrame = data.frame("EI"=eiErrors, "VSoC"=vsocErrors)
errorsData
barplot(as.matrix(errorsDataFrame), col=c("blue", "red"), ylab="Number of Errors (NE)")
barplot(as.matrix(errorsDataFrame), col=c("blue", "red"), ylab="Number of Errors (NE)")
plot(1,2,3)
plot(c(1,2,3))
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
main(3,1)
?tapply
plot(1,2,3)
plot(c(1,2,3)
)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Tese/Experimento/R scripts/Scripts.r')
main(3,1)
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
source('~/Dropbox/Anova-SOOT.R')
